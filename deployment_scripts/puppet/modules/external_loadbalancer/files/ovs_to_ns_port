#!/bin/bash
#
# Resource script for ovs to namespace port support
#
# Description:  Manages port from OVS to namespace as an OCF resource
#               in an High Availability setup
#
# License: GNU General Public License (GPL)
#
#  usage: $0 {start|stop|restart|status|monitor|validate-all|meta-data}
#
#  The "start" arg starts vrouter.
#
#  The "stop" arg stops it.
#
# OCF parameters:
# OCF_RESKEY_ns
# OCF_RESKEY_other_networks
# OCF_RESKEY_ovs_interface
# OCF_RESKEY_namespace_interface
# OCF_RESKEY_namespace_ip
# OCF_RESKEY_namespace_cidr
# OCF_RESKEY_route_metric
# OCF_RESKEY_namespace_out_interface
#
##########################################################################
# Initialization:

OCF_ROOT_default="/usr/lib/ocf"

OCF_RESKEY_ns_default="vrouter"
OCF_RESKEY_other_networks_default=false
OCF_RESKEY_ovs_interface_default="br-floating"
OCF_RESKEY_namespace_interface_default="floating-gw"
OCF_RESKEY_namespace_ip_default="10.10.10.1"
OCF_RESKEY_namespace_cidr_default="10.10.10.0/24"
OCF_RESKEY_namespace_out_interface_default="vr-host-ns"

: ${OCF_ROOT=${OCF_ROOT_default}}
: ${HA_LOGTAG="ocf-ovs_to_ns_port"}
: ${HA_LOGFACILITY="daemon"}

: ${OCF_RESKEY_ns=${OCF_RESKEY_ns_default}}
: ${OCF_RESKEY_other_networks=${OCF_RESKEY_other_networks_default}}
: ${OCF_RESKEY_ovs_interface=${OCF_RESKEY_ovs_interface_default}}
: ${OCF_RESKEY_namespace_interface=${OCF_RESKEY_namespace_interface_default}}
: ${OCF_RESKEY_host_ip=${OCF_RESKEY_host_ip_default}}
: ${OCF_RESKEY_namespace_ip=${OCF_RESKEY_namespace_ip_default}}
: ${OCF_RESKEY_namespace_cidr=${OCF_RESKEY_namespace_cidr_default}}
: ${OCF_RESKEY_namespace_out_interface=${OCF_RESKEY_namespace_out_interface_default}}

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

USAGE="Usage: $0 {start|stop|restart|status|monitor|validate-all|meta-data}";

RUN_IN_NS="ip netns exec $OCF_RESKEY_ns "
if [[ -z $OCF_RESKEY_ns ]] ; then
  RUN=''
else
  RUN="$RUN_IN_NS "
fi

##########################################################################

usage()
{
  echo $USAGE >&2
}

meta_data()
{
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="ovs-to-ns-port">
<version>1.0</version>
<longdesc lang="en">
This script manages OVS to namespace patches
</longdesc>
<shortdesc lang="en">Manages patches from OVS interfaces to interfaces in namespace</shortdesc>

<parameters>

<parameter name="ns">
<longdesc lang="en">
Name of network namespace.
Should be present.
</longdesc>
<shortdesc lang="en">Name of network namespace.</shortdesc>
<content type="string" default="${OCF_RESKEY_ns_default}"/>
</parameter>

<parameter name="other_networks">
<longdesc lang="en">
Additional routes that should be added to this resource. Routes will be added via value namespace_interface.
</longdesc>
<shortdesc lang="en">List of addtional routes to add routes for.</shortdesc>
<content type="string" default="$OCF_RESKEY_other_networks_default"/>
</parameter>

<parameter name="ovs_interface">
<longdesc lang="en">
The OVS part of the interface pair used to connect the namespace to the network
For example, "ovs-port"
</longdesc>
<shortdesc lang="en">The name of the OVS interface used for namespace</shortdesc>
<content type="string" default="${OCF_RESKEY_ovs_interface_default}" />
</parameter>

<parameter name="namespace_interface">
<longdesc lang="en">
The namespace part of the interface pair used to connect the namespace to the network
For example, "vr-ns"
</longdesc>
<shortdesc lang="en">The name of the namespace interface used for namespace</shortdesc>
<content type="string" default="${OCF_RESKEY_namespace_interface_default}" />
</parameter>

<parameter name="namespace_out_interface">
<longdesc lang="en">
The name of outgoing interface used for default routing in namespace.
For example, "vr-host-ns"
</longdesc>
<shortdesc lang="en">The name of the namespace outgoing interface</shortdesc>
<content type="string" default="${OCF_RESKEY_namespace_out_interface_default}" />
</parameter>

<parameter name="namespace_ip">
<longdesc lang="en">
The IP address used by the namespace interface, uses namespace_cidr to determine subnet.
Should not collide with any IP addresses already used in your network.
For example, "10.10.10.1"
</longdesc>
<shortdesc lang="en">Namespace interface IP address</shortdesc>
<content type="string" default="${OCF_RESKEY_namespace_ip_default}" />
</parameter>

<parameter name="namespace_cidr">
<longdesc lang="en">
The network mask length used to determine subnet of the IP in namespace.
For example, "24"
</longdesc>
<shortdesc lang="en">Network mask length</shortdesc>
<content type="string" default="${OCF_RESKEY_namespace_cidr_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20s"/>
<action name="stop" timeout="20s"/>
<action name="reload" timeout="20s"/>
<action name="monitor" depth="0" timeout="20s" interval="60s" />
<action name="validate-all" timeout="20s"/>
<action name="meta-data"  timeout="5s"/>
</actions>
</resource-agent>
END
exit $OCF_SUCCESS
}

check_ns() {
  local LH="${LL} check_ns():"
  local ns=`ip netns list | grep "$OCF_RESKEY_ns"`
  ocf_log debug "${LH} recieved netns list: ${ns}"
  [[ $ns != $OCF_RESKEY_ns ]] && return $OCF_ERR_GENERIC
  return $OCF_SUCCESS
}

ovs_ns_patch_status()
{
  check_ns || return $OCF_ERR_GENERIC

  ocf_log debug "Check if $OCF_RESKEY_namespace_interface is added to OVS $OCF_RESKEY_ovs_interface"
  ovs-vsctl list-ports $OCF_RESKEY_ovs_interface | grep $OCF_RESKEY_namespace_interface || return $OCF_NOT_RUNNING
  sleep 1

  ocf_log debug "Check if $OCF_RESKEY_namespace_ip is assigned to $OCF_RESKEY_namespace_interface"
  $RUN_IN_NS ip -4 a ls $OCF_RESKEY_namespace_interface | grep $OCF_RESKEY_namespace_ip
  rc=$?
  if [ $rc -ge 1 ]; then
    ocf_log debug "Failed to find $OCF_RESKEY_namespace_ip on $OCF_RESKEY_namespace_interface: $rc"
    return $OCF_NOT_RUNNING
  fi

  ocf_log debug "Check if MASQUERADE rule present for $OCF_RESKEY_namespace_cidr network"
  $RUN_IN_NS iptables -t nat -L -n -v | grep MASQUERADE | grep $OCF_RESKEY_namespace_cidr
  rc=$?
  if [ $rc -ge 1 ]; then
    ocf_log debug "Failed to find MASQUERADE iptables rule for $OCF_RESKEY_namespace_cidr CIDR: $rc"
    return $OCF_NOT_RUNNING
  fi

  return $OCF_SUCCESS
}

ovs_ns_patch_setup()
{
  ovs_ns_patch_status && return $OCF_SUCCESS
  ocf_log debug "Deleting port from ovs"
  ocf_run ovs-vsctl del-port $OCF_RESKEY_namespace_interface
  sleep 1

  ocf_log debug "Adding port to ovs interface"
  ocf_run ovs-vsctl add-port $OCF_RESKEY_ovs_interface $OCF_RESKEY_namespace_interface -- set interface $OCF_RESKEY_namespace_interface type=internal
  if [ $? -ge 1 ]; then
    return $OCF_ERR_GENERIC
  fi
  sleep 1

  ocf_log debug "Running: ip link set $OCF_RESKEY_namespace_interface netns $OCF_RESKEY_ns"
  ocf_run ip link set $OCF_RESKEY_namespace_interface netns $OCF_RESKEY_ns
  if [ $? -ge 1 ]; then
    return $OCF_ERR_GENERIC
  fi

  ocf_log debug "Configuring interface in namespace"
  net_mask=${OCF_RESKEY_namespace_cidr#*/}
  ocf_run $RUN_IN_NS ifconfig $OCF_RESKEY_namespace_interface $OCF_RESKEY_namespace_ip/$net_mask
  if [ $? -ge 1 ]; then
    return $OCF_ERR_GENERIC
  fi

  ocf_log debug "Cleaning up masquerade rules"
  ocf_log debug "$RUN_IN_NS iptables -t nat -D POSTROUTING -s $OCF_RESKEY_namespace_cidr -o $OCF_RESKEY_namespace_out_interface -j MASQUERADE"
  while `$RUN_IN_NS iptables -t nat -D POSTROUTING -s $OCF_RESKEY_namespace_cidr -o $OCF_RESKEY_namespace_out_interface -j MASQUERADE`; do
    ocf_log debug "Removed old rule"
  done

  ocf_log debug "Configuring masquerade"
  ocf_run $RUN_IN_NS iptables -t nat -I POSTROUTING -s $OCF_RESKEY_namespace_cidr -o $OCF_RESKEY_namespace_out_interface -j MASQUERADE
  if [ $? -ge 1 ]; then
    return $OCF_ERR_GENERIC
  fi
}

ovs_ns_patch_start()
{
  ovs_ns_patch_setup
  return $OCF_SUCCESS
}

ovs_ns_patch_stop()
{
  ovs_ns_patch_status || return $OCF_ERR_GENERIC

  ocf_log debug "Deleting port from ovs"
  ocf_run ovs-vsctl del-port $OCF_RESKEY_namespace_interface
  sleep 1
  ocf_log debug "Cleaning up masquerade rules"
  ocf_log debug "$RUN_IN_NS iptables -t nat -D POSTROUTING -s $OCF_RESKEY_namespace_cidr -o $OCF_RESKEY_namespace_out_interface -j MASQUERADE"
  while `$RUN_IN_NS iptables -t nat -D POSTROUTING -s $OCF_RESKEY_namespace_cidr -o $OCF_RESKEY_namespace_out_interface -j MASQUERADE`; do
    ocf_log debug "Removed old rule"
  done

  return $OCF_SUCCESS
}

ovs_ns_patch_monitor()
{
  ovs_ns_patch_status
}

ovs_ns_patch_validate_all()
{
  check_ns
  ovs_ns_patch_status
  return $OCF_SUCCESS
}

ovs_ns_patch_restart()
{
  ovs_ns_patch_stop
  ovs_ns_patch_start
}

#
# Main
#

if [ $# -ne 1 ]; then
  usage
  exit $OCF_ERR_ARGS
fi
umask 0022
export LL="${OCF_RESOURCE_INSTANCE}:"

case $1 in
  start) ovs_ns_patch_start
  ;;

  stop) ovs_ns_patch_stop
  ;;

  restart) ovs_ns_patch_restart
  ;;

  status)  ovs_ns_patch_status
  ;;

  monitor) ovs_ns_patch_monitor
  ;;

  validate-all) ovs_ns_patch_validate_all
  ;;

  meta-data) meta_data
  ;;

  usage) usage; exit $OCF_SUCCESS
  ;;

  *) usage; exit $OCF_ERR_UNIMPLEMENTED
  ;;
esac
